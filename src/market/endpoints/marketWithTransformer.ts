/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * Market API
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  QuoteHomePageResponse,
  QuoteRealResponse,
  QuoteRealBody,
  Kline200,
  KlineBody,
  GetMinuteLine200,
  GetMinuteLineBody,
  MarketDataResponse,
  MarketDataBody,
} from '../model';
import { customInstance } from '../mutator/custom-instance';
import type { ErrorType } from '../mutator/custom-instance';

/**
 * 大V排行榜页面信息
 */
export const quoteHomePage = () => {
  return customInstance<QuoteHomePageResponse>({ url: `/quote/homePage.do`, method: 'post' });
};

export const getQuoteHomePageQueryKey = () => [`/quote/homePage.do`];

export type QuoteHomePageQueryResult = NonNullable<Awaited<ReturnType<typeof quoteHomePage>>>;
export type QuoteHomePageQueryError = ErrorType<unknown>;

export const useQuoteHomePage = <
  TData = Awaited<ReturnType<typeof quoteHomePage>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof quoteHomePage>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getQuoteHomePageQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof quoteHomePage>>> = () => quoteHomePage();

  const query = useQuery<Awaited<ReturnType<typeof quoteHomePage>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const quoteReal = (quoteRealBody: QuoteRealBody) => {
  return customInstance<QuoteRealResponse>({
    url: `/quote/real.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: quoteRealBody,
  });
};

export const getQuoteRealQueryKey = (quoteRealBody: QuoteRealBody) => [
  `/quote/real.do`,
  quoteRealBody,
];

export type QuoteRealQueryResult = NonNullable<Awaited<ReturnType<typeof quoteReal>>>;
export type QuoteRealQueryError = ErrorType<unknown>;

export const useQuoteReal = <
  TData = Awaited<ReturnType<typeof quoteReal>>,
  TError = ErrorType<unknown>,
>(
  quoteRealBody: QuoteRealBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof quoteReal>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getQuoteRealQueryKey(quoteRealBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof quoteReal>>> = () =>
    quoteReal(quoteRealBody);

  const query = useQuery<Awaited<ReturnType<typeof quoteReal>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const kline = (klineBody: KlineBody) => {
  return customInstance<Kline200>({
    url: `/quote/kline.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: klineBody,
  });
};

export const getKlineQueryKey = (klineBody: KlineBody) => [`/quote/kline.do`, klineBody];

export type KlineQueryResult = NonNullable<Awaited<ReturnType<typeof kline>>>;
export type KlineQueryError = ErrorType<unknown>;

export const useKline = <TData = Awaited<ReturnType<typeof kline>>, TError = ErrorType<unknown>>(
  klineBody: KlineBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof kline>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getKlineQueryKey(klineBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof kline>>> = () => kline(klineBody);

  const query = useQuery<Awaited<ReturnType<typeof kline>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getMinuteLine = (getMinuteLineBody: GetMinuteLineBody) => {
  return customInstance<GetMinuteLine200>({
    url: `/quote/getMinuteLine.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: getMinuteLineBody,
  });
};

export const getGetMinuteLineQueryKey = (getMinuteLineBody: GetMinuteLineBody) => [
  `/quote/getMinuteLine.do`,
  getMinuteLineBody,
];

export type GetMinuteLineQueryResult = NonNullable<Awaited<ReturnType<typeof getMinuteLine>>>;
export type GetMinuteLineQueryError = ErrorType<unknown>;

export const useGetMinuteLine = <
  TData = Awaited<ReturnType<typeof getMinuteLine>>,
  TError = ErrorType<unknown>,
>(
  getMinuteLineBody: GetMinuteLineBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getMinuteLine>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMinuteLineQueryKey(getMinuteLineBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMinuteLine>>> = () =>
    getMinuteLine(getMinuteLineBody);

  const query = useQuery<Awaited<ReturnType<typeof getMinuteLine>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const marketData = (marketDataBody: MarketDataBody) => {
  return customInstance<MarketDataResponse>({
    url: `/quote/marketData.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: marketDataBody,
  });
};

export const getMarketDataQueryKey = (marketDataBody: MarketDataBody) => [
  `/quote/marketData.do`,
  marketDataBody,
];

export type MarketDataQueryResult = NonNullable<Awaited<ReturnType<typeof marketData>>>;
export type MarketDataQueryError = ErrorType<unknown>;

export const useMarketData = <
  TData = Awaited<ReturnType<typeof marketData>>,
  TError = ErrorType<unknown>,
>(
  marketDataBody: MarketDataBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof marketData>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getMarketDataQueryKey(marketDataBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof marketData>>> = () =>
    marketData(marketDataBody);

  const query = useQuery<Awaited<ReturnType<typeof marketData>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
