/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * API Title
 * OpenAPI spec version: 1.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  CommonResponse,
  UserSecurityCheckIdentityBody,
  SmsGetBody,
  QueryTransferListResponse,
  AccountQueryTransferListBody,
  OutHoldAmountResponse,
  AccountTransferBody,
  AccountOutHoldAmountBody,
  ListAccountTypeResponse,
  UserSecurityUpdatePhoneBody,
  DepositWithdrawLocalSubmitBody,
  InviteBuyBody,
  InviteHomeResponse,
  InviteHomeBody,
  DepositListResponse,
  DepositListBody,
  DepositWithdrawGetInfoResponse,
  DepositWithdrawGetInfoBody,
  HomeMyResponse,
  HomeMyBody,
  UserInfoResponse,
  UserInfoBody,
} from '../model';
import { customInstance } from '../mutator/custom-instance';
import type { ErrorType } from '../mutator/custom-instance';

/**
 * 身份验证
 */
export const userSecurityCheckIdentity = (
  userSecurityCheckIdentityBody: UserSecurityCheckIdentityBody,
) => {
  return customInstance<CommonResponse>({
    url: `/user/security/checkIdentity.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: userSecurityCheckIdentityBody,
  });
};

export type UserSecurityCheckIdentityMutationResult = NonNullable<
  Awaited<ReturnType<typeof userSecurityCheckIdentity>>
>;
export type UserSecurityCheckIdentityMutationBody = UserSecurityCheckIdentityBody;
export type UserSecurityCheckIdentityMutationError = ErrorType<unknown>;

export const useUserSecurityCheckIdentity = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userSecurityCheckIdentity>>,
    TError,
    { data: UserSecurityCheckIdentityBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userSecurityCheckIdentity>>,
    { data: UserSecurityCheckIdentityBody }
  > = (props) => {
    const { data } = props ?? {};

    return userSecurityCheckIdentity(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof userSecurityCheckIdentity>>,
    TError,
    { data: UserSecurityCheckIdentityBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 获取手机验证码
 */
export const smsGet = (smsGetBody: SmsGetBody) => {
  return customInstance<CommonResponse>({
    url: `/sms/get.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: smsGetBody,
  });
};

export type SmsGetMutationResult = NonNullable<Awaited<ReturnType<typeof smsGet>>>;
export type SmsGetMutationBody = SmsGetBody;
export type SmsGetMutationError = ErrorType<unknown>;

export const useSmsGet = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smsGet>>,
    TError,
    { data: SmsGetBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof smsGet>>, { data: SmsGetBody }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return smsGet(data);
  };

  return useMutation<Awaited<ReturnType<typeof smsGet>>, TError, { data: SmsGetBody }, TContext>(
    mutationFn,
    mutationOptions,
  );
};

/**
 * 获取转账记录
 */
export const accountQueryTransferList = (
  accountQueryTransferListBody: AccountQueryTransferListBody,
) => {
  return customInstance<QueryTransferListResponse>({
    url: `/account/queryTransferList.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: accountQueryTransferListBody,
  });
};

export const getAccountQueryTransferListQueryKey = (
  accountQueryTransferListBody: AccountQueryTransferListBody,
) => [`/account/queryTransferList.do`, accountQueryTransferListBody];

export type AccountQueryTransferListQueryResult = NonNullable<
  Awaited<ReturnType<typeof accountQueryTransferList>>
>;
export type AccountQueryTransferListQueryError = ErrorType<unknown>;

export const useAccountQueryTransferList = <
  TData = Awaited<ReturnType<typeof accountQueryTransferList>>,
  TError = ErrorType<unknown>,
>(
  accountQueryTransferListBody: AccountQueryTransferListBody,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof accountQueryTransferList>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAccountQueryTransferListQueryKey(accountQueryTransferListBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof accountQueryTransferList>>> = () =>
    accountQueryTransferList(accountQueryTransferListBody);

  const query = useQuery<Awaited<ReturnType<typeof accountQueryTransferList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 划转，从一个账户转到另外一个账户
 */
export const accountTransfer = (accountTransferBody: AccountTransferBody) => {
  return customInstance<OutHoldAmountResponse>({
    url: `/account/transfer.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: accountTransferBody,
  });
};

export type AccountTransferMutationResult = NonNullable<
  Awaited<ReturnType<typeof accountTransfer>>
>;
export type AccountTransferMutationBody = AccountTransferBody;
export type AccountTransferMutationError = ErrorType<unknown>;

export const useAccountTransfer = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountTransfer>>,
    TError,
    { data: AccountTransferBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof accountTransfer>>,
    { data: AccountTransferBody }
  > = (props) => {
    const { data } = props ?? {};

    return accountTransfer(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof accountTransfer>>,
    TError,
    { data: AccountTransferBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 获取我的账户可用数量
 */
export const accountOutHoldAmount = (accountOutHoldAmountBody: AccountOutHoldAmountBody) => {
  return customInstance<OutHoldAmountResponse>({
    url: `/account/outHoldAmount.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: accountOutHoldAmountBody,
  });
};

export const getAccountOutHoldAmountQueryKey = (
  accountOutHoldAmountBody: AccountOutHoldAmountBody,
) => [`/account/outHoldAmount.do`, accountOutHoldAmountBody];

export type AccountOutHoldAmountQueryResult = NonNullable<
  Awaited<ReturnType<typeof accountOutHoldAmount>>
>;
export type AccountOutHoldAmountQueryError = ErrorType<unknown>;

export const useAccountOutHoldAmount = <
  TData = Awaited<ReturnType<typeof accountOutHoldAmount>>,
  TError = ErrorType<unknown>,
>(
  accountOutHoldAmountBody: AccountOutHoldAmountBody,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof accountOutHoldAmount>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAccountOutHoldAmountQueryKey(accountOutHoldAmountBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof accountOutHoldAmount>>> = () =>
    accountOutHoldAmount(accountOutHoldAmountBody);

  const query = useQuery<Awaited<ReturnType<typeof accountOutHoldAmount>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 获取所有账户类型
 */
export const accountListAccountType = () => {
  return customInstance<ListAccountTypeResponse>({
    url: `/account/listAccountType.do`,
    method: 'post',
  });
};

export const getAccountListAccountTypeQueryKey = () => [`/account/listAccountType.do`];

export type AccountListAccountTypeQueryResult = NonNullable<
  Awaited<ReturnType<typeof accountListAccountType>>
>;
export type AccountListAccountTypeQueryError = ErrorType<unknown>;

export const useAccountListAccountType = <
  TData = Awaited<ReturnType<typeof accountListAccountType>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof accountListAccountType>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAccountListAccountTypeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof accountListAccountType>>> = () =>
    accountListAccountType();

  const query = useQuery<Awaited<ReturnType<typeof accountListAccountType>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 修改手机
 */
export const userSecurityUpdatePhone = (
  userSecurityUpdatePhoneBody: UserSecurityUpdatePhoneBody,
) => {
  return customInstance<CommonResponse>({
    url: `/user/security/updatePhone.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: userSecurityUpdatePhoneBody,
  });
};

export type UserSecurityUpdatePhoneMutationResult = NonNullable<
  Awaited<ReturnType<typeof userSecurityUpdatePhone>>
>;
export type UserSecurityUpdatePhoneMutationBody = UserSecurityUpdatePhoneBody;
export type UserSecurityUpdatePhoneMutationError = ErrorType<unknown>;

export const useUserSecurityUpdatePhone = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userSecurityUpdatePhone>>,
    TError,
    { data: UserSecurityUpdatePhoneBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userSecurityUpdatePhone>>,
    { data: UserSecurityUpdatePhoneBody }
  > = (props) => {
    const { data } = props ?? {};

    return userSecurityUpdatePhone(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof userSecurityUpdatePhone>>,
    TError,
    { data: UserSecurityUpdatePhoneBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 充提币申请提交
 */
export const depositWithdrawLocalSubmit = (
  depositWithdrawLocalSubmitBody: DepositWithdrawLocalSubmitBody,
) => {
  return customInstance<CommonResponse>({
    url: `/depositeWithdraw/localSubmit.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: depositWithdrawLocalSubmitBody,
  });
};

export type DepositWithdrawLocalSubmitMutationResult = NonNullable<
  Awaited<ReturnType<typeof depositWithdrawLocalSubmit>>
>;
export type DepositWithdrawLocalSubmitMutationBody = DepositWithdrawLocalSubmitBody;
export type DepositWithdrawLocalSubmitMutationError = ErrorType<unknown>;

export const useDepositWithdrawLocalSubmit = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof depositWithdrawLocalSubmit>>,
    TError,
    { data: DepositWithdrawLocalSubmitBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof depositWithdrawLocalSubmit>>,
    { data: DepositWithdrawLocalSubmitBody }
  > = (props) => {
    const { data } = props ?? {};

    return depositWithdrawLocalSubmit(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof depositWithdrawLocalSubmit>>,
    TError,
    { data: DepositWithdrawLocalSubmitBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 購買邀請碼
 */
export const inviteBuy = (inviteBuyBody: InviteBuyBody) => {
  return customInstance<CommonResponse>({
    url: `/invite/buy.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: inviteBuyBody,
  });
};

export type InviteBuyMutationResult = NonNullable<Awaited<ReturnType<typeof inviteBuy>>>;
export type InviteBuyMutationBody = InviteBuyBody;
export type InviteBuyMutationError = ErrorType<unknown>;

export const useInviteBuy = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof inviteBuy>>,
    TError,
    { data: InviteBuyBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof inviteBuy>>,
    { data: InviteBuyBody }
  > = (props) => {
    const { data } = props ?? {};

    return inviteBuy(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof inviteBuy>>,
    TError,
    { data: InviteBuyBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 獲取邀請碼頁面
 */
export const inviteHome = (inviteHomeBody: InviteHomeBody) => {
  return customInstance<InviteHomeResponse>({
    url: `/invite/home.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: inviteHomeBody,
  });
};

export const getInviteHomeQueryKey = (inviteHomeBody: InviteHomeBody) => [
  `/invite/home.do`,
  inviteHomeBody,
];

export type InviteHomeQueryResult = NonNullable<Awaited<ReturnType<typeof inviteHome>>>;
export type InviteHomeQueryError = ErrorType<unknown>;

export const useInviteHome = <
  TData = Awaited<ReturnType<typeof inviteHome>>,
  TError = ErrorType<unknown>,
>(
  inviteHomeBody: InviteHomeBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof inviteHome>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getInviteHomeQueryKey(inviteHomeBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof inviteHome>>> = () =>
    inviteHome(inviteHomeBody);

  const query = useQuery<Awaited<ReturnType<typeof inviteHome>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 获取提币充币/申购相关记录
 */
export const depositList = (depositListBody: DepositListBody) => {
  return customInstance<DepositListResponse>({
    url: `/depositeWithdraw/list.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: depositListBody,
  });
};

export const getDepositListQueryKey = (depositListBody: DepositListBody) => [
  `/depositeWithdraw/list.do`,
  depositListBody,
];

export type DepositListQueryResult = NonNullable<Awaited<ReturnType<typeof depositList>>>;
export type DepositListQueryError = ErrorType<unknown>;

export const useDepositList = <
  TData = Awaited<ReturnType<typeof depositList>>,
  TError = ErrorType<unknown>,
>(
  depositListBody: DepositListBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof depositList>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDepositListQueryKey(depositListBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof depositList>>> = () =>
    depositList(depositListBody);

  const query = useQuery<Awaited<ReturnType<typeof depositList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 获取充币信息
 */
export const depositWithdrawGetInfo = (depositWithdrawGetInfoBody: DepositWithdrawGetInfoBody) => {
  return customInstance<DepositWithdrawGetInfoResponse>({
    url: `/depositeWithdraw/getInfo.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: depositWithdrawGetInfoBody,
  });
};

export const getDepositWithdrawGetInfoQueryKey = (
  depositWithdrawGetInfoBody: DepositWithdrawGetInfoBody,
) => [`/depositeWithdraw/getInfo.do`, depositWithdrawGetInfoBody];

export type DepositWithdrawGetInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof depositWithdrawGetInfo>>
>;
export type DepositWithdrawGetInfoQueryError = ErrorType<unknown>;

export const useDepositWithdrawGetInfo = <
  TData = Awaited<ReturnType<typeof depositWithdrawGetInfo>>,
  TError = ErrorType<unknown>,
>(
  depositWithdrawGetInfoBody: DepositWithdrawGetInfoBody,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof depositWithdrawGetInfo>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDepositWithdrawGetInfoQueryKey(depositWithdrawGetInfoBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof depositWithdrawGetInfo>>> = () =>
    depositWithdrawGetInfo(depositWithdrawGetInfoBody);

  const query = useQuery<Awaited<ReturnType<typeof depositWithdrawGetInfo>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 我的頁面信息
 */
export const homeMy = (homeMyBody: HomeMyBody) => {
  return customInstance<HomeMyResponse>({
    url: `/home/my.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: homeMyBody,
  });
};

export type HomeMyMutationResult = NonNullable<Awaited<ReturnType<typeof homeMy>>>;
export type HomeMyMutationBody = HomeMyBody;
export type HomeMyMutationError = ErrorType<unknown>;

export const useHomeMy = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof homeMy>>,
    TError,
    { data: HomeMyBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof homeMy>>, { data: HomeMyBody }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return homeMy(data);
  };

  return useMutation<Awaited<ReturnType<typeof homeMy>>, TError, { data: HomeMyBody }, TContext>(
    mutationFn,
    mutationOptions,
  );
};

/**
 * 獲取我的頁面信息
 */
export const userInfo = (userInfoBody: UserInfoBody) => {
  return customInstance<UserInfoResponse>({
    url: `/user/info.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: userInfoBody,
  });
};

export type UserInfoMutationResult = NonNullable<Awaited<ReturnType<typeof userInfo>>>;
export type UserInfoMutationBody = UserInfoBody;
export type UserInfoMutationError = ErrorType<unknown>;

export const useUserInfo = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userInfo>>,
    TError,
    { data: UserInfoBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userInfo>>,
    { data: UserInfoBody }
  > = (props) => {
    const { data } = props ?? {};

    return userInfo(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof userInfo>>,
    TError,
    { data: UserInfoBody },
    TContext
  >(mutationFn, mutationOptions);
};
