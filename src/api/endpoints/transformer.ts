/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * API Title
 * OpenAPI spec version: 1.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type { InviteHomeResponse, InviteBuyBody, InviteHomeBody } from '../model';
import { customInstance } from '../mutator/custom-instance';
import type { ErrorType } from '../mutator/custom-instance';

/**
 * 購買邀請碼
 */
export const inviteBuy = (inviteBuyBody: InviteBuyBody) => {
  return customInstance<InviteHomeResponse>({
    url: `/invite/buy.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: inviteBuyBody,
  });
};

export type InviteBuyMutationResult = NonNullable<Awaited<ReturnType<typeof inviteBuy>>>;
export type InviteBuyMutationBody = InviteBuyBody;
export type InviteBuyMutationError = ErrorType<unknown>;

export const useInviteBuy = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof inviteBuy>>,
    TError,
    { data: InviteBuyBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof inviteBuy>>,
    { data: InviteBuyBody }
  > = (props) => {
    const { data } = props ?? {};

    return inviteBuy(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof inviteBuy>>,
    TError,
    { data: InviteBuyBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 獲取邀請碼頁面
 */
export const inviteHome = (inviteHomeBody: InviteHomeBody) => {
  return customInstance<InviteHomeResponse>({
    url: `/invite/home.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: inviteHomeBody,
  });
};

export const getInviteHomeQueryKey = (inviteHomeBody: InviteHomeBody) => [
  `/invite/home.do`,
  inviteHomeBody,
];

export type InviteHomeQueryResult = NonNullable<Awaited<ReturnType<typeof inviteHome>>>;
export type InviteHomeQueryError = ErrorType<unknown>;

export const useInviteHome = <
  TData = Awaited<ReturnType<typeof inviteHome>>,
  TError = ErrorType<unknown>,
>(
  inviteHomeBody: InviteHomeBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof inviteHome>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getInviteHomeQueryKey(inviteHomeBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof inviteHome>>> = () =>
    inviteHome(inviteHomeBody);

  const query = useQuery<Awaited<ReturnType<typeof inviteHome>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
