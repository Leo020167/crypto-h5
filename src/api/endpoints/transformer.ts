/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * API Title
 * OpenAPI spec version: 1.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  GetWithdrawConfigsResponse,
  GetWithdrawConfigsBody,
  CommonResponse,
  DelAddressBody,
  AddressListResponse,
  AddressListBody,
  AddAddressBody,
  ProOrderOpenBody,
  ProOrderDetailResponse,
  ProOrderDetailBody,
  PledgeCommitBody,
  RecordListPledgesResponse,
  RecordListPledgesBody,
  ListPledgesResponse,
  HomeCropMeResponse,
  CoinListResponse,
  GetCoinInfoBody,
  ChargeConfigsResponse,
  GetChargeConfigsBody,
  GetCoinListBody,
  IsOptional200,
  IsOptionalBody,
  CoinInfo200,
  CoinInfoBody,
  AllConfigResponse,
  AccountRecordListResponse,
  AccountRecordListBody,
  HomeAccountResponse,
  OtcDelMyAdBody,
  OtcGetMyAdInfo200,
  OtcGetMyAdInfoBody,
  OtcSetOnlineBody,
  OtcUpdateMyAdBody,
  OtcAddMyAdBody,
  OtcGetAdPrice200,
  OtcGetAdPriceBody,
  OtcFindMyAdList200,
  OtcGetCertificationInfo200,
  OtcPaymentDeleteBody,
  OtcPaymentSaveBody,
  OtcSubmitAppealBody,
  OtcGetInitAppealList200,
  OtcGetInitAppealListBody,
  ToPayOrderResponse,
  OtcToMarkPayOrderSuccessBody,
  OtcToPayOrderBody,
  OtcCancelOrderBody,
  OtcGetOrderDetailResponse,
  OtcGetOrderDetailBody,
  OtcFindOrderListResponse,
  OtcFindOrderListBody,
  OtcFindMyPaymentListResponse,
  MessageFindBody,
  OtcCreateOrder200,
  OtcCreateOrderBody,
  OtcFindAdListResponse,
  OtcFindAdListBody,
  OtcConfigResponse,
  IdentityAuthResponse,
  IdentitySubmitBody,
  ProOrderQuerySumResponse,
  ProOrderQuerySumBody,
  ProOrderQueryListResponse,
  ProOrderQueryListBody,
  UserSecurityCheckIdentityBody,
  SmsGetBody,
  QueryTransferListResponse,
  AccountQueryTransferListBody,
  OutHoldAmountResponse,
  AccountTransferBody,
  AccountOutHoldAmountBody,
  ListAccountTypeResponse,
  UserSecurityUpdatePhoneBody,
  WithdrawSubmitBody,
  ChargeSubmitBody,
  InviteBuyBody,
  InviteHomeResponse,
  InviteHomeBody,
  DepositListResponse,
  DepositListBody,
  HomeMyResponse,
  HomeMyBody,
  UserInfoResponse,
  UserInfoBody,
} from '../model';
import { customInstance } from '../mutator/custom-instance';
import type { ErrorType } from '../mutator/custom-instance';

/**
 * 获取提币信息
 */
export const getWithdrawConfigs = (getWithdrawConfigsBody: GetWithdrawConfigsBody) => {
  return customInstance<GetWithdrawConfigsResponse>({
    url: `/depositeWithdraw/getWithdrawConfigs.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: getWithdrawConfigsBody,
  });
};

export const getGetWithdrawConfigsQueryKey = (getWithdrawConfigsBody: GetWithdrawConfigsBody) => [
  `/depositeWithdraw/getWithdrawConfigs.do`,
  getWithdrawConfigsBody,
];

export type GetWithdrawConfigsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWithdrawConfigs>>
>;
export type GetWithdrawConfigsQueryError = ErrorType<unknown>;

export const useGetWithdrawConfigs = <
  TData = Awaited<ReturnType<typeof getWithdrawConfigs>>,
  TError = ErrorType<unknown>,
>(
  getWithdrawConfigsBody: GetWithdrawConfigsBody,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getWithdrawConfigs>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWithdrawConfigsQueryKey(getWithdrawConfigsBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWithdrawConfigs>>> = () =>
    getWithdrawConfigs(getWithdrawConfigsBody);

  const query = useQuery<Awaited<ReturnType<typeof getWithdrawConfigs>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 删除提币地址
 */
export const delAddress = (delAddressBody: DelAddressBody) => {
  return customInstance<CommonResponse>({
    url: `/depositeWithdraw/delAddress.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: delAddressBody,
  });
};

export type DelAddressMutationResult = NonNullable<Awaited<ReturnType<typeof delAddress>>>;
export type DelAddressMutationBody = DelAddressBody;
export type DelAddressMutationError = ErrorType<unknown>;

export const useDelAddress = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof delAddress>>,
    TError,
    { data: DelAddressBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof delAddress>>,
    { data: DelAddressBody }
  > = (props) => {
    const { data } = props ?? {};

    return delAddress(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof delAddress>>,
    TError,
    { data: DelAddressBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 获取提币地址列表
 */
export const addressList = (addressListBody: AddressListBody) => {
  return customInstance<AddressListResponse>({
    url: `/depositeWithdraw/addressList.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: addressListBody,
  });
};

export const getAddressListQueryKey = (addressListBody: AddressListBody) => [
  `/depositeWithdraw/addressList.do`,
  addressListBody,
];

export type AddressListQueryResult = NonNullable<Awaited<ReturnType<typeof addressList>>>;
export type AddressListQueryError = ErrorType<unknown>;

export const useAddressList = <
  TData = Awaited<ReturnType<typeof addressList>>,
  TError = ErrorType<unknown>,
>(
  addressListBody: AddressListBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof addressList>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAddressListQueryKey(addressListBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof addressList>>> = () =>
    addressList(addressListBody);

  const query = useQuery<Awaited<ReturnType<typeof addressList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 添加提币地址
 */
export const addAddress = (addAddressBody: AddAddressBody) => {
  return customInstance<CommonResponse>({
    url: `/depositeWithdraw/addAddress.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: addAddressBody,
  });
};

export type AddAddressMutationResult = NonNullable<Awaited<ReturnType<typeof addAddress>>>;
export type AddAddressMutationBody = AddAddressBody;
export type AddAddressMutationError = ErrorType<unknown>;

export const useAddAddress = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addAddress>>,
    TError,
    { data: AddAddressBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addAddress>>,
    { data: AddAddressBody }
  > = (props) => {
    const { data } = props ?? {};

    return addAddress(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof addAddress>>,
    TError,
    { data: AddAddressBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 明細
 */
export const proOrderOpen = (proOrderOpenBody: ProOrderOpenBody) => {
  return customInstance<CommonResponse>({
    url: `/pro/order/open.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: proOrderOpenBody,
  });
};

export type ProOrderOpenMutationResult = NonNullable<Awaited<ReturnType<typeof proOrderOpen>>>;
export type ProOrderOpenMutationBody = ProOrderOpenBody;
export type ProOrderOpenMutationError = ErrorType<unknown>;

export const useProOrderOpen = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof proOrderOpen>>,
    TError,
    { data: ProOrderOpenBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof proOrderOpen>>,
    { data: ProOrderOpenBody }
  > = (props) => {
    const { data } = props ?? {};

    return proOrderOpen(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof proOrderOpen>>,
    TError,
    { data: ProOrderOpenBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 明細
 */
export const proOrderDetail = (proOrderDetailBody: ProOrderDetailBody) => {
  return customInstance<ProOrderDetailResponse>({
    url: `/pro/order/detail.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: proOrderDetailBody,
  });
};

export const getProOrderDetailQueryKey = (proOrderDetailBody: ProOrderDetailBody) => [
  `/pro/order/detail.do`,
  proOrderDetailBody,
];

export type ProOrderDetailQueryResult = NonNullable<Awaited<ReturnType<typeof proOrderDetail>>>;
export type ProOrderDetailQueryError = ErrorType<unknown>;

export const useProOrderDetail = <
  TData = Awaited<ReturnType<typeof proOrderDetail>>,
  TError = ErrorType<unknown>,
>(
  proOrderDetailBody: ProOrderDetailBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof proOrderDetail>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getProOrderDetailQueryKey(proOrderDetailBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof proOrderDetail>>> = () =>
    proOrderDetail(proOrderDetailBody);

  const query = useQuery<Awaited<ReturnType<typeof proOrderDetail>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 提交质押申请
 */
export const pledgeCommit = (pledgeCommitBody: PledgeCommitBody) => {
  return customInstance<CommonResponse>({
    url: `/pledge/commit.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: pledgeCommitBody,
  });
};

export type PledgeCommitMutationResult = NonNullable<Awaited<ReturnType<typeof pledgeCommit>>>;
export type PledgeCommitMutationBody = PledgeCommitBody;
export type PledgeCommitMutationError = ErrorType<unknown>;

export const usePledgeCommit = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pledgeCommit>>,
    TError,
    { data: PledgeCommitBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof pledgeCommit>>,
    { data: PledgeCommitBody }
  > = (props) => {
    const { data } = props ?? {};

    return pledgeCommit(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof pledgeCommit>>,
    TError,
    { data: PledgeCommitBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 获取质押记录列表
 */
export const recordListPledges = (recordListPledgesBody: RecordListPledgesBody) => {
  return customInstance<RecordListPledgesResponse>({
    url: `/pledge/recordList.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: recordListPledgesBody,
  });
};

export const getRecordListPledgesQueryKey = (recordListPledgesBody: RecordListPledgesBody) => [
  `/pledge/recordList.do`,
  recordListPledgesBody,
];

export type RecordListPledgesQueryResult = NonNullable<
  Awaited<ReturnType<typeof recordListPledges>>
>;
export type RecordListPledgesQueryError = ErrorType<unknown>;

export const useRecordListPledges = <
  TData = Awaited<ReturnType<typeof recordListPledges>>,
  TError = ErrorType<unknown>,
>(
  recordListPledgesBody: RecordListPledgesBody,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof recordListPledges>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRecordListPledgesQueryKey(recordListPledgesBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof recordListPledges>>> = () =>
    recordListPledges(recordListPledgesBody);

  const query = useQuery<Awaited<ReturnType<typeof recordListPledges>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 获取可质押品种列表
 */
export const listPledges = () => {
  return customInstance<ListPledgesResponse>({ url: `/pledge/list.do`, method: 'post' });
};

export const getListPledgesQueryKey = () => [`/pledge/list.do`];

export type ListPledgesQueryResult = NonNullable<Awaited<ReturnType<typeof listPledges>>>;
export type ListPledgesQueryError = ErrorType<unknown>;

export const useListPledges = <
  TData = Awaited<ReturnType<typeof listPledges>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof listPledges>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListPledgesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listPledges>>> = () => listPledges();

  const query = useQuery<Awaited<ReturnType<typeof listPledges>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 大V排行榜页面信息
 */
export const homeCropMe = () => {
  return customInstance<HomeCropMeResponse>({ url: `/home/cropyme.do`, method: 'post' });
};

export const getHomeCropMeQueryKey = () => [`/home/cropyme.do`];

export type HomeCropMeQueryResult = NonNullable<Awaited<ReturnType<typeof homeCropMe>>>;
export type HomeCropMeQueryError = ErrorType<unknown>;

export const useHomeCropMe = <
  TData = Awaited<ReturnType<typeof homeCropMe>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof homeCropMe>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getHomeCropMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof homeCropMe>>> = () => homeCropMe();

  const query = useQuery<Awaited<ReturnType<typeof homeCropMe>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 获取提币充币相关信息
 */
export const getCoinInfo = (getCoinInfoBody: GetCoinInfoBody) => {
  return customInstance<CoinListResponse>({
    url: `/depositeWithdraw/getCoinInfo.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: getCoinInfoBody,
  });
};

export const getGetCoinInfoQueryKey = (getCoinInfoBody: GetCoinInfoBody) => [
  `/depositeWithdraw/getCoinInfo.do`,
  getCoinInfoBody,
];

export type GetCoinInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getCoinInfo>>>;
export type GetCoinInfoQueryError = ErrorType<unknown>;

export const useGetCoinInfo = <
  TData = Awaited<ReturnType<typeof getCoinInfo>>,
  TError = ErrorType<unknown>,
>(
  getCoinInfoBody: GetCoinInfoBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getCoinInfo>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCoinInfoQueryKey(getCoinInfoBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCoinInfo>>> = () =>
    getCoinInfo(getCoinInfoBody);

  const query = useQuery<Awaited<ReturnType<typeof getCoinInfo>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 获取充币信息
 */
export const getChargeConfigs = (getChargeConfigsBody: GetChargeConfigsBody) => {
  return customInstance<ChargeConfigsResponse>({
    url: `/depositeWithdraw/getChargeConfigs.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: getChargeConfigsBody,
  });
};

export const getGetChargeConfigsQueryKey = (getChargeConfigsBody: GetChargeConfigsBody) => [
  `/depositeWithdraw/getChargeConfigs.do`,
  getChargeConfigsBody,
];

export type GetChargeConfigsQueryResult = NonNullable<Awaited<ReturnType<typeof getChargeConfigs>>>;
export type GetChargeConfigsQueryError = ErrorType<unknown>;

export const useGetChargeConfigs = <
  TData = Awaited<ReturnType<typeof getChargeConfigs>>,
  TError = ErrorType<unknown>,
>(
  getChargeConfigsBody: GetChargeConfigsBody,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getChargeConfigs>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChargeConfigsQueryKey(getChargeConfigsBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getChargeConfigs>>> = () =>
    getChargeConfigs(getChargeConfigsBody);

  const query = useQuery<Awaited<ReturnType<typeof getChargeConfigs>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 获取充提币币种列表
 */
export const getCoinList = (getCoinListBody: GetCoinListBody) => {
  return customInstance<CoinListResponse>({
    url: `/depositeWithdraw/coinList.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: getCoinListBody,
  });
};

export const getGetCoinListQueryKey = (getCoinListBody: GetCoinListBody) => [
  `/depositeWithdraw/coinList.do`,
  getCoinListBody,
];

export type GetCoinListQueryResult = NonNullable<Awaited<ReturnType<typeof getCoinList>>>;
export type GetCoinListQueryError = ErrorType<unknown>;

export const useGetCoinList = <
  TData = Awaited<ReturnType<typeof getCoinList>>,
  TError = ErrorType<unknown>,
>(
  getCoinListBody: GetCoinListBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getCoinList>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCoinListQueryKey(getCoinListBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCoinList>>> = () =>
    getCoinList(getCoinListBody);

  const query = useQuery<Awaited<ReturnType<typeof getCoinList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 是否自选
 */
export const isOptional = (isOptionalBody: IsOptionalBody) => {
  return customInstance<IsOptional200>({
    url: `/optional/coin/isOptional.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: isOptionalBody,
  });
};

export const getIsOptionalQueryKey = (isOptionalBody: IsOptionalBody) => [
  `/optional/coin/isOptional.do`,
  isOptionalBody,
];

export type IsOptionalQueryResult = NonNullable<Awaited<ReturnType<typeof isOptional>>>;
export type IsOptionalQueryError = ErrorType<unknown>;

export const useIsOptional = <
  TData = Awaited<ReturnType<typeof isOptional>>,
  TError = ErrorType<unknown>,
>(
  isOptionalBody: IsOptionalBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof isOptional>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getIsOptionalQueryKey(isOptionalBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof isOptional>>> = () =>
    isOptional(isOptionalBody);

  const query = useQuery<Awaited<ReturnType<typeof isOptional>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 获取币信息
 */
export const coinInfo = (coinInfoBody: CoinInfoBody) => {
  return customInstance<CoinInfo200>({
    url: `/coin/info.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: coinInfoBody,
  });
};

export const getCoinInfoQueryKey = (coinInfoBody: CoinInfoBody) => [`/coin/info.do`, coinInfoBody];

export type CoinInfoQueryResult = NonNullable<Awaited<ReturnType<typeof coinInfo>>>;
export type CoinInfoQueryError = ErrorType<unknown>;

export const useCoinInfo = <
  TData = Awaited<ReturnType<typeof coinInfo>>,
  TError = ErrorType<unknown>,
>(
  coinInfoBody: CoinInfoBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof coinInfo>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCoinInfoQueryKey(coinInfoBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof coinInfo>>> = () => coinInfo(coinInfoBody);

  const query = useQuery<Awaited<ReturnType<typeof coinInfo>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 获取风险率说明、搬砖收益说明、banner、金刚区信息等等
 */
export const allConfig = () => {
  return customInstance<AllConfigResponse>({ url: `/config/all.do`, method: 'post' });
};

export const getAllConfigQueryKey = () => [`/config/all.do`];

export type AllConfigQueryResult = NonNullable<Awaited<ReturnType<typeof allConfig>>>;
export type AllConfigQueryError = ErrorType<unknown>;

export const useAllConfig = <
  TData = Awaited<ReturnType<typeof allConfig>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof allConfig>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAllConfigQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof allConfig>>> = () => allConfig();

  const query = useQuery<Awaited<ReturnType<typeof allConfig>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 获取token账户财务记录
 */
export const accountRecordList = (accountRecordListBody: AccountRecordListBody) => {
  return customInstance<AccountRecordListResponse>({
    url: `/account/recordList.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: accountRecordListBody,
  });
};

export const getAccountRecordListQueryKey = (accountRecordListBody: AccountRecordListBody) => [
  `/account/recordList.do`,
  accountRecordListBody,
];

export type AccountRecordListQueryResult = NonNullable<
  Awaited<ReturnType<typeof accountRecordList>>
>;
export type AccountRecordListQueryError = ErrorType<unknown>;

export const useAccountRecordList = <
  TData = Awaited<ReturnType<typeof accountRecordList>>,
  TError = ErrorType<unknown>,
>(
  accountRecordListBody: AccountRecordListBody,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof accountRecordList>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAccountRecordListQueryKey(accountRecordListBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof accountRecordList>>> = () =>
    accountRecordList(accountRecordListBody);

  const query = useQuery<Awaited<ReturnType<typeof accountRecordList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 账户信息
 */
export const homeAccount = () => {
  return customInstance<HomeAccountResponse>({ url: `/home/account.do`, method: 'post' });
};

export const getHomeAccountQueryKey = () => [`/home/account.do`];

export type HomeAccountQueryResult = NonNullable<Awaited<ReturnType<typeof homeAccount>>>;
export type HomeAccountQueryError = ErrorType<unknown>;

export const useHomeAccount = <
  TData = Awaited<ReturnType<typeof homeAccount>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof homeAccount>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getHomeAccountQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof homeAccount>>> = () => homeAccount();

  const query = useQuery<Awaited<ReturnType<typeof homeAccount>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 获取广告详情信息
 */
export const otcCertificationApplyForCancellation = () => {
  return customInstance<CommonResponse>({
    url: `/otc/certification/applyForCancellation.do`,
    method: 'post',
  });
};

export type OtcCertificationApplyForCancellationMutationResult = NonNullable<
  Awaited<ReturnType<typeof otcCertificationApplyForCancellation>>
>;

export type OtcCertificationApplyForCancellationMutationError = ErrorType<unknown>;

export const useOtcCertificationApplyForCancellation = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof otcCertificationApplyForCancellation>>,
    TError,
    TVariables,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof otcCertificationApplyForCancellation>>,
    TVariables
  > = () => {
    return otcCertificationApplyForCancellation();
  };

  return useMutation<
    Awaited<ReturnType<typeof otcCertificationApplyForCancellation>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 获取广告详情信息
 */
export const otcCertificationAuthenticate = () => {
  return customInstance<CommonResponse>({
    url: `/otc/certification/authenticate.do`,
    method: 'post',
  });
};

export type OtcCertificationAuthenticateMutationResult = NonNullable<
  Awaited<ReturnType<typeof otcCertificationAuthenticate>>
>;

export type OtcCertificationAuthenticateMutationError = ErrorType<unknown>;

export const useOtcCertificationAuthenticate = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof otcCertificationAuthenticate>>,
    TError,
    TVariables,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof otcCertificationAuthenticate>>,
    TVariables
  > = () => {
    return otcCertificationAuthenticate();
  };

  return useMutation<
    Awaited<ReturnType<typeof otcCertificationAuthenticate>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 获取广告详情信息
 */
export const otcDelMyAd = (otcDelMyAdBody: OtcDelMyAdBody) => {
  return customInstance<CommonResponse>({
    url: `/otc/myad/delMyAd.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: otcDelMyAdBody,
  });
};

export type OtcDelMyAdMutationResult = NonNullable<Awaited<ReturnType<typeof otcDelMyAd>>>;
export type OtcDelMyAdMutationBody = OtcDelMyAdBody;
export type OtcDelMyAdMutationError = ErrorType<unknown>;

export const useOtcDelMyAd = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof otcDelMyAd>>,
    TError,
    { data: OtcDelMyAdBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof otcDelMyAd>>,
    { data: OtcDelMyAdBody }
  > = (props) => {
    const { data } = props ?? {};

    return otcDelMyAd(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof otcDelMyAd>>,
    TError,
    { data: OtcDelMyAdBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 获取广告详情信息
 */
export const otcGetMyAdInfo = (otcGetMyAdInfoBody: OtcGetMyAdInfoBody) => {
  return customInstance<OtcGetMyAdInfo200>({
    url: `/otc/myad/getMyAdInfo.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: otcGetMyAdInfoBody,
  });
};

export const getOtcGetMyAdInfoQueryKey = (otcGetMyAdInfoBody: OtcGetMyAdInfoBody) => [
  `/otc/myad/getMyAdInfo.do`,
  otcGetMyAdInfoBody,
];

export type OtcGetMyAdInfoQueryResult = NonNullable<Awaited<ReturnType<typeof otcGetMyAdInfo>>>;
export type OtcGetMyAdInfoQueryError = ErrorType<unknown>;

export const useOtcGetMyAdInfo = <
  TData = Awaited<ReturnType<typeof otcGetMyAdInfo>>,
  TError = ErrorType<unknown>,
>(
  otcGetMyAdInfoBody: OtcGetMyAdInfoBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof otcGetMyAdInfo>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOtcGetMyAdInfoQueryKey(otcGetMyAdInfoBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof otcGetMyAdInfo>>> = () =>
    otcGetMyAdInfo(otcGetMyAdInfoBody);

  const query = useQuery<Awaited<ReturnType<typeof otcGetMyAdInfo>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 设置上下架
 */
export const otcSetOnline = (otcSetOnlineBody: OtcSetOnlineBody) => {
  return customInstance<CommonResponse>({
    url: `/otc/myad/setOnline.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: otcSetOnlineBody,
  });
};

export type OtcSetOnlineMutationResult = NonNullable<Awaited<ReturnType<typeof otcSetOnline>>>;
export type OtcSetOnlineMutationBody = OtcSetOnlineBody;
export type OtcSetOnlineMutationError = ErrorType<unknown>;

export const useOtcSetOnline = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof otcSetOnline>>,
    TError,
    { data: OtcSetOnlineBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof otcSetOnline>>,
    { data: OtcSetOnlineBody }
  > = (props) => {
    const { data } = props ?? {};

    return otcSetOnline(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof otcSetOnline>>,
    TError,
    { data: OtcSetOnlineBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 商家发布广告
 */
export const otcUpdateMyAd = (otcUpdateMyAdBody: OtcUpdateMyAdBody) => {
  return customInstance<CommonResponse>({
    url: `/otc/myad/updateMyAd.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: otcUpdateMyAdBody,
  });
};

export type OtcUpdateMyAdMutationResult = NonNullable<Awaited<ReturnType<typeof otcUpdateMyAd>>>;
export type OtcUpdateMyAdMutationBody = OtcUpdateMyAdBody;
export type OtcUpdateMyAdMutationError = ErrorType<unknown>;

export const useOtcUpdateMyAd = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof otcUpdateMyAd>>,
    TError,
    { data: OtcUpdateMyAdBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof otcUpdateMyAd>>,
    { data: OtcUpdateMyAdBody }
  > = (props) => {
    const { data } = props ?? {};

    return otcUpdateMyAd(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof otcUpdateMyAd>>,
    TError,
    { data: OtcUpdateMyAdBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 商家发布广告
 */
export const otcAddMyAd = (otcAddMyAdBody: OtcAddMyAdBody) => {
  return customInstance<CommonResponse>({
    url: `/otc/myad/addMyAd.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: otcAddMyAdBody,
  });
};

export type OtcAddMyAdMutationResult = NonNullable<Awaited<ReturnType<typeof otcAddMyAd>>>;
export type OtcAddMyAdMutationBody = OtcAddMyAdBody;
export type OtcAddMyAdMutationError = ErrorType<unknown>;

export const useOtcAddMyAd = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof otcAddMyAd>>,
    TError,
    { data: OtcAddMyAdBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof otcAddMyAd>>,
    { data: OtcAddMyAdBody }
  > = (props) => {
    const { data } = props ?? {};

    return otcAddMyAd(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof otcAddMyAd>>,
    TError,
    { data: OtcAddMyAdBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 获取当前最大价格或最小价格
 */
export const otcGetAdPrice = (otcGetAdPriceBody: OtcGetAdPriceBody) => {
  return customInstance<OtcGetAdPrice200>({
    url: `/otc/myad/getAdPrice.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: otcGetAdPriceBody,
  });
};

export const getOtcGetAdPriceQueryKey = (otcGetAdPriceBody: OtcGetAdPriceBody) => [
  `/otc/myad/getAdPrice.do`,
  otcGetAdPriceBody,
];

export type OtcGetAdPriceQueryResult = NonNullable<Awaited<ReturnType<typeof otcGetAdPrice>>>;
export type OtcGetAdPriceQueryError = ErrorType<unknown>;

export const useOtcGetAdPrice = <
  TData = Awaited<ReturnType<typeof otcGetAdPrice>>,
  TError = ErrorType<unknown>,
>(
  otcGetAdPriceBody: OtcGetAdPriceBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof otcGetAdPrice>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOtcGetAdPriceQueryKey(otcGetAdPriceBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof otcGetAdPrice>>> = () =>
    otcGetAdPrice(otcGetAdPriceBody);

  const query = useQuery<Awaited<ReturnType<typeof otcGetAdPrice>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 获取我的广告列表
 */
export const otcFindMyAdList = () => {
  return customInstance<OtcFindMyAdList200>({ url: `/otc/myad/findMyAdList.do`, method: 'post' });
};

export const getOtcFindMyAdListQueryKey = () => [`/otc/myad/findMyAdList.do`];

export type OtcFindMyAdListQueryResult = NonNullable<Awaited<ReturnType<typeof otcFindMyAdList>>>;
export type OtcFindMyAdListQueryError = ErrorType<unknown>;

export const useOtcFindMyAdList = <
  TData = Awaited<ReturnType<typeof otcFindMyAdList>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof otcFindMyAdList>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOtcFindMyAdListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof otcFindMyAdList>>> = () =>
    otcFindMyAdList();

  const query = useQuery<Awaited<ReturnType<typeof otcFindMyAdList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 获取商家认证需要信息，包括缴纳保证金
 */
export const otcGetCertificationInfo = () => {
  return customInstance<OtcGetCertificationInfo200>({
    url: `/otc/certification/getCertificationInfo.do`,
    method: 'post',
  });
};

export const getOtcGetCertificationInfoQueryKey = () => [
  `/otc/certification/getCertificationInfo.do`,
];

export type OtcGetCertificationInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof otcGetCertificationInfo>>
>;
export type OtcGetCertificationInfoQueryError = ErrorType<unknown>;

export const useOtcGetCertificationInfo = <
  TData = Awaited<ReturnType<typeof otcGetCertificationInfo>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof otcGetCertificationInfo>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOtcGetCertificationInfoQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof otcGetCertificationInfo>>> = () =>
    otcGetCertificationInfo();

  const query = useQuery<Awaited<ReturnType<typeof otcGetCertificationInfo>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 刪除收款方式
 */
export const otcPaymentDelete = (otcPaymentDeleteBody: OtcPaymentDeleteBody) => {
  return customInstance<CommonResponse>({
    url: `/otc/payment/delete.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: otcPaymentDeleteBody,
  });
};

export type OtcPaymentDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof otcPaymentDelete>>
>;
export type OtcPaymentDeleteMutationBody = OtcPaymentDeleteBody;
export type OtcPaymentDeleteMutationError = ErrorType<unknown>;

export const useOtcPaymentDelete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof otcPaymentDelete>>,
    TError,
    { data: OtcPaymentDeleteBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof otcPaymentDelete>>,
    { data: OtcPaymentDeleteBody }
  > = (props) => {
    const { data } = props ?? {};

    return otcPaymentDelete(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof otcPaymentDelete>>,
    TError,
    { data: OtcPaymentDeleteBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 添加/修改收款方式
 */
export const otcPaymentSave = (otcPaymentSaveBody: OtcPaymentSaveBody) => {
  return customInstance<CommonResponse>({
    url: `/otc/payment/savePayment.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: otcPaymentSaveBody,
  });
};

export type OtcPaymentSaveMutationResult = NonNullable<Awaited<ReturnType<typeof otcPaymentSave>>>;
export type OtcPaymentSaveMutationBody = OtcPaymentSaveBody;
export type OtcPaymentSaveMutationError = ErrorType<unknown>;

export const useOtcPaymentSave = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof otcPaymentSave>>,
    TError,
    { data: OtcPaymentSaveBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof otcPaymentSave>>,
    { data: OtcPaymentSaveBody }
  > = (props) => {
    const { data } = props ?? {};

    return otcPaymentSave(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof otcPaymentSave>>,
    TError,
    { data: OtcPaymentSaveBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 出售者权限操作【出售】第2步：点击“申诉”按钮
 */
export const otcSubmitAppeal = (otcSubmitAppealBody: OtcSubmitAppealBody) => {
  return customInstance<CommonResponse>({
    url: `/otc/mainad/submitAppeal.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: otcSubmitAppealBody,
  });
};

export type OtcSubmitAppealMutationResult = NonNullable<
  Awaited<ReturnType<typeof otcSubmitAppeal>>
>;
export type OtcSubmitAppealMutationBody = OtcSubmitAppealBody;
export type OtcSubmitAppealMutationError = ErrorType<unknown>;

export const useOtcSubmitAppeal = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof otcSubmitAppeal>>,
    TError,
    { data: OtcSubmitAppealBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof otcSubmitAppeal>>,
    { data: OtcSubmitAppealBody }
  > = (props) => {
    const { data } = props ?? {};

    return otcSubmitAppeal(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof otcSubmitAppeal>>,
    TError,
    { data: OtcSubmitAppealBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 获取申诉理由列表
 */
export const otcGetInitAppealList = (otcGetInitAppealListBody: OtcGetInitAppealListBody) => {
  return customInstance<OtcGetInitAppealList200>({
    url: `/otc/mainad/getInitAppealList.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: otcGetInitAppealListBody,
  });
};

export const getOtcGetInitAppealListQueryKey = (
  otcGetInitAppealListBody: OtcGetInitAppealListBody,
) => [`/otc/mainad/getInitAppealList.do`, otcGetInitAppealListBody];

export type OtcGetInitAppealListQueryResult = NonNullable<
  Awaited<ReturnType<typeof otcGetInitAppealList>>
>;
export type OtcGetInitAppealListQueryError = ErrorType<unknown>;

export const useOtcGetInitAppealList = <
  TData = Awaited<ReturnType<typeof otcGetInitAppealList>>,
  TError = ErrorType<unknown>,
>(
  otcGetInitAppealListBody: OtcGetInitAppealListBody,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof otcGetInitAppealList>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOtcGetInitAppealListQueryKey(otcGetInitAppealListBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof otcGetInitAppealList>>> = () =>
    otcGetInitAppealList(otcGetInitAppealListBody);

  const query = useQuery<Awaited<ReturnType<typeof otcGetInitAppealList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 购买者权限操作【付款】第2步：点击“我已付款成功”按钮
 */
export const otcToMarkPayOrderSuccess = (
  otcToMarkPayOrderSuccessBody: OtcToMarkPayOrderSuccessBody,
) => {
  return customInstance<ToPayOrderResponse>({
    url: `/otc/mainad/toMarkPayOrderSuccess.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: otcToMarkPayOrderSuccessBody,
  });
};

export type OtcToMarkPayOrderSuccessMutationResult = NonNullable<
  Awaited<ReturnType<typeof otcToMarkPayOrderSuccess>>
>;
export type OtcToMarkPayOrderSuccessMutationBody = OtcToMarkPayOrderSuccessBody;
export type OtcToMarkPayOrderSuccessMutationError = ErrorType<unknown>;

export const useOtcToMarkPayOrderSuccess = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof otcToMarkPayOrderSuccess>>,
    TError,
    { data: OtcToMarkPayOrderSuccessBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof otcToMarkPayOrderSuccess>>,
    { data: OtcToMarkPayOrderSuccessBody }
  > = (props) => {
    const { data } = props ?? {};

    return otcToMarkPayOrderSuccess(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof otcToMarkPayOrderSuccess>>,
    TError,
    { data: OtcToMarkPayOrderSuccessBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 购买者权限操作【付款】第1步：点击“去付款”按钮进入到付款页面
 */
export const otcToPayOrder = (otcToPayOrderBody: OtcToPayOrderBody) => {
  return customInstance<ToPayOrderResponse>({
    url: `/otc/mainad/toPayOrder.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: otcToPayOrderBody,
  });
};

export const getOtcToPayOrderQueryKey = (otcToPayOrderBody: OtcToPayOrderBody) => [
  `/otc/mainad/toPayOrder.do`,
  otcToPayOrderBody,
];

export type OtcToPayOrderQueryResult = NonNullable<Awaited<ReturnType<typeof otcToPayOrder>>>;
export type OtcToPayOrderQueryError = ErrorType<unknown>;

export const useOtcToPayOrder = <
  TData = Awaited<ReturnType<typeof otcToPayOrder>>,
  TError = ErrorType<unknown>,
>(
  otcToPayOrderBody: OtcToPayOrderBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof otcToPayOrder>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOtcToPayOrderQueryKey(otcToPayOrderBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof otcToPayOrder>>> = () =>
    otcToPayOrder(otcToPayOrderBody);

  const query = useQuery<Awaited<ReturnType<typeof otcToPayOrder>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 取消订单
 */
export const otcCancelOrder = (otcCancelOrderBody: OtcCancelOrderBody) => {
  return customInstance<CommonResponse>({
    url: `/otc/mainad/cancelOrder.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: otcCancelOrderBody,
  });
};

export type OtcCancelOrderMutationResult = NonNullable<Awaited<ReturnType<typeof otcCancelOrder>>>;
export type OtcCancelOrderMutationBody = OtcCancelOrderBody;
export type OtcCancelOrderMutationError = ErrorType<unknown>;

export const useOtcCancelOrder = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof otcCancelOrder>>,
    TError,
    { data: OtcCancelOrderBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof otcCancelOrder>>,
    { data: OtcCancelOrderBody }
  > = (props) => {
    const { data } = props ?? {};

    return otcCancelOrder(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof otcCancelOrder>>,
    TError,
    { data: OtcCancelOrderBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 我的订单记录
 */
export const otcGetOrderDetail = (otcGetOrderDetailBody: OtcGetOrderDetailBody) => {
  return customInstance<OtcGetOrderDetailResponse>({
    url: `/otc/mainad/getOrderDetail.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: otcGetOrderDetailBody,
  });
};

export const getOtcGetOrderDetailQueryKey = (otcGetOrderDetailBody: OtcGetOrderDetailBody) => [
  `/otc/mainad/getOrderDetail.do`,
  otcGetOrderDetailBody,
];

export type OtcGetOrderDetailQueryResult = NonNullable<
  Awaited<ReturnType<typeof otcGetOrderDetail>>
>;
export type OtcGetOrderDetailQueryError = ErrorType<unknown>;

export const useOtcGetOrderDetail = <
  TData = Awaited<ReturnType<typeof otcGetOrderDetail>>,
  TError = ErrorType<unknown>,
>(
  otcGetOrderDetailBody: OtcGetOrderDetailBody,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof otcGetOrderDetail>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOtcGetOrderDetailQueryKey(otcGetOrderDetailBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof otcGetOrderDetail>>> = () =>
    otcGetOrderDetail(otcGetOrderDetailBody);

  const query = useQuery<Awaited<ReturnType<typeof otcGetOrderDetail>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 我的订单记录
 */
export const otcFindOrderList = (otcFindOrderListBody: OtcFindOrderListBody) => {
  return customInstance<OtcFindOrderListResponse>({
    url: `/otc/mainad/findOrderList.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: otcFindOrderListBody,
  });
};

export const getOtcFindOrderListQueryKey = (otcFindOrderListBody: OtcFindOrderListBody) => [
  `/otc/mainad/findOrderList.do`,
  otcFindOrderListBody,
];

export type OtcFindOrderListQueryResult = NonNullable<Awaited<ReturnType<typeof otcFindOrderList>>>;
export type OtcFindOrderListQueryError = ErrorType<unknown>;

export const useOtcFindOrderList = <
  TData = Awaited<ReturnType<typeof otcFindOrderList>>,
  TError = ErrorType<unknown>,
>(
  otcFindOrderListBody: OtcFindOrderListBody,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof otcFindOrderList>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOtcFindOrderListQueryKey(otcFindOrderListBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof otcFindOrderList>>> = () =>
    otcFindOrderList(otcFindOrderListBody);

  const query = useQuery<Awaited<ReturnType<typeof otcFindOrderList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 获取用户的收款方式列表
 */
export const otcFindMyPaymentList = () => {
  return customInstance<OtcFindMyPaymentListResponse>({
    url: `/otc/payment/findMyPaymentList.do`,
    method: 'post',
  });
};

export const getOtcFindMyPaymentListQueryKey = () => [`/otc/payment/findMyPaymentList.do`];

export type OtcFindMyPaymentListQueryResult = NonNullable<
  Awaited<ReturnType<typeof otcFindMyPaymentList>>
>;
export type OtcFindMyPaymentListQueryError = ErrorType<unknown>;

export const useOtcFindMyPaymentList = <
  TData = Awaited<ReturnType<typeof otcFindMyPaymentList>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof otcFindMyPaymentList>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOtcFindMyPaymentListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof otcFindMyPaymentList>>> = () =>
    otcFindMyPaymentList();

  const query = useQuery<Awaited<ReturnType<typeof otcFindMyPaymentList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 获取我的消息
 */
export const messageFind = (messageFindBody: MessageFindBody) => {
  return customInstance<CommonResponse>({
    url: `/message/find.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: messageFindBody,
  });
};

export const getMessageFindQueryKey = (messageFindBody: MessageFindBody) => [
  `/message/find.do`,
  messageFindBody,
];

export type MessageFindQueryResult = NonNullable<Awaited<ReturnType<typeof messageFind>>>;
export type MessageFindQueryError = ErrorType<unknown>;

export const useMessageFind = <
  TData = Awaited<ReturnType<typeof messageFind>>,
  TError = ErrorType<unknown>,
>(
  messageFindBody: MessageFindBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof messageFind>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getMessageFindQueryKey(messageFindBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof messageFind>>> = () =>
    messageFind(messageFindBody);

  const query = useQuery<Awaited<ReturnType<typeof messageFind>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 下单交易
 */
export const otcCreateOrder = (otcCreateOrderBody: OtcCreateOrderBody) => {
  return customInstance<OtcCreateOrder200>({
    url: `/otc/mainad/createOrder.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: otcCreateOrderBody,
  });
};

export type OtcCreateOrderMutationResult = NonNullable<Awaited<ReturnType<typeof otcCreateOrder>>>;
export type OtcCreateOrderMutationBody = OtcCreateOrderBody;
export type OtcCreateOrderMutationError = ErrorType<unknown>;

export const useOtcCreateOrder = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof otcCreateOrder>>,
    TError,
    { data: OtcCreateOrderBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof otcCreateOrder>>,
    { data: OtcCreateOrderBody }
  > = (props) => {
    const { data } = props ?? {};

    return otcCreateOrder(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof otcCreateOrder>>,
    TError,
    { data: OtcCreateOrderBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 市场广告列表（购买，出售）
 */
export const otcFindAdList = (otcFindAdListBody: OtcFindAdListBody) => {
  return customInstance<OtcFindAdListResponse>({
    url: `/otc/mainad/findAdList.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: otcFindAdListBody,
  });
};

export const getOtcFindAdListQueryKey = (otcFindAdListBody: OtcFindAdListBody) => [
  `/otc/mainad/findAdList.do`,
  otcFindAdListBody,
];

export type OtcFindAdListQueryResult = NonNullable<Awaited<ReturnType<typeof otcFindAdList>>>;
export type OtcFindAdListQueryError = ErrorType<unknown>;

export const useOtcFindAdList = <
  TData = Awaited<ReturnType<typeof otcFindAdList>>,
  TError = ErrorType<unknown>,
>(
  otcFindAdListBody: OtcFindAdListBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof otcFindAdList>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOtcFindAdListQueryKey(otcFindAdListBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof otcFindAdList>>> = () =>
    otcFindAdList(otcFindAdListBody);

  const query = useQuery<Awaited<ReturnType<typeof otcFindAdList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 获取货币类型列表
 */
export const otcConfig = () => {
  return customInstance<OtcConfigResponse>({ url: `/otc/mainad/config.do`, method: 'post' });
};

export const getOtcConfigQueryKey = () => [`/otc/mainad/config.do`];

export type OtcConfigQueryResult = NonNullable<Awaited<ReturnType<typeof otcConfig>>>;
export type OtcConfigQueryError = ErrorType<unknown>;

export const useOtcConfig = <
  TData = Awaited<ReturnType<typeof otcConfig>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof otcConfig>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOtcConfigQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof otcConfig>>> = () => otcConfig();

  const query = useQuery<Awaited<ReturnType<typeof otcConfig>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 获取实名认证信息
 */
export const identityGet = () => {
  return customInstance<IdentityAuthResponse>({ url: `/identity/get.do`, method: 'post' });
};

export const getIdentityGetQueryKey = () => [`/identity/get.do`];

export type IdentityGetQueryResult = NonNullable<Awaited<ReturnType<typeof identityGet>>>;
export type IdentityGetQueryError = ErrorType<unknown>;

export const useIdentityGet = <
  TData = Awaited<ReturnType<typeof identityGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof identityGet>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getIdentityGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof identityGet>>> = () => identityGet();

  const query = useQuery<Awaited<ReturnType<typeof identityGet>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 提交实名认证信息
 */
export const identitySubmit = (identitySubmitBody: IdentitySubmitBody) => {
  return customInstance<CommonResponse>({
    url: `/identity/submit.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: identitySubmitBody,
  });
};

export type IdentitySubmitMutationResult = NonNullable<Awaited<ReturnType<typeof identitySubmit>>>;
export type IdentitySubmitMutationBody = IdentitySubmitBody;
export type IdentitySubmitMutationError = ErrorType<unknown>;

export const useIdentitySubmit = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof identitySubmit>>,
    TError,
    { data: IdentitySubmitBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof identitySubmit>>,
    { data: IdentitySubmitBody }
  > = (props) => {
    const { data } = props ?? {};

    return identitySubmit(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof identitySubmit>>,
    TError,
    { data: IdentitySubmitBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 获取交易的总笔数和产生的代币数
 */
export const proOrderQuerySum = (proOrderQuerySumBody: ProOrderQuerySumBody) => {
  return customInstance<ProOrderQuerySumResponse>({
    url: `/pro/order/querySum.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: proOrderQuerySumBody,
  });
};

export const getProOrderQuerySumQueryKey = (proOrderQuerySumBody: ProOrderQuerySumBody) => [
  `/pro/order/querySum.do`,
  proOrderQuerySumBody,
];

export type ProOrderQuerySumQueryResult = NonNullable<Awaited<ReturnType<typeof proOrderQuerySum>>>;
export type ProOrderQuerySumQueryError = ErrorType<unknown>;

export const useProOrderQuerySum = <
  TData = Awaited<ReturnType<typeof proOrderQuerySum>>,
  TError = ErrorType<unknown>,
>(
  proOrderQuerySumBody: ProOrderQuerySumBody,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof proOrderQuerySum>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getProOrderQuerySumQueryKey(proOrderQuerySumBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof proOrderQuerySum>>> = () =>
    proOrderQuerySum(proOrderQuerySumBody);

  const query = useQuery<Awaited<ReturnType<typeof proOrderQuerySum>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 查询交易记录（只适用数字货币记录、股指期货记录）
 */
export const proOrderQueryList = (proOrderQueryListBody: ProOrderQueryListBody) => {
  return customInstance<ProOrderQueryListResponse>({
    url: `/pro/order/queryList.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: proOrderQueryListBody,
  });
};

export const getProOrderQueryListQueryKey = (proOrderQueryListBody: ProOrderQueryListBody) => [
  `/pro/order/queryList.do`,
  proOrderQueryListBody,
];

export type ProOrderQueryListQueryResult = NonNullable<
  Awaited<ReturnType<typeof proOrderQueryList>>
>;
export type ProOrderQueryListQueryError = ErrorType<unknown>;

export const useProOrderQueryList = <
  TData = Awaited<ReturnType<typeof proOrderQueryList>>,
  TError = ErrorType<unknown>,
>(
  proOrderQueryListBody: ProOrderQueryListBody,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof proOrderQueryList>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getProOrderQueryListQueryKey(proOrderQueryListBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof proOrderQueryList>>> = () =>
    proOrderQueryList(proOrderQueryListBody);

  const query = useQuery<Awaited<ReturnType<typeof proOrderQueryList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 身份验证
 */
export const userSecurityCheckIdentity = (
  userSecurityCheckIdentityBody: UserSecurityCheckIdentityBody,
) => {
  return customInstance<CommonResponse>({
    url: `/user/security/checkIdentity.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: userSecurityCheckIdentityBody,
  });
};

export type UserSecurityCheckIdentityMutationResult = NonNullable<
  Awaited<ReturnType<typeof userSecurityCheckIdentity>>
>;
export type UserSecurityCheckIdentityMutationBody = UserSecurityCheckIdentityBody;
export type UserSecurityCheckIdentityMutationError = ErrorType<unknown>;

export const useUserSecurityCheckIdentity = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userSecurityCheckIdentity>>,
    TError,
    { data: UserSecurityCheckIdentityBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userSecurityCheckIdentity>>,
    { data: UserSecurityCheckIdentityBody }
  > = (props) => {
    const { data } = props ?? {};

    return userSecurityCheckIdentity(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof userSecurityCheckIdentity>>,
    TError,
    { data: UserSecurityCheckIdentityBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 获取手机验证码
 */
export const smsGet = (smsGetBody: SmsGetBody) => {
  return customInstance<CommonResponse>({
    url: `/sms/get.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: smsGetBody,
  });
};

export type SmsGetMutationResult = NonNullable<Awaited<ReturnType<typeof smsGet>>>;
export type SmsGetMutationBody = SmsGetBody;
export type SmsGetMutationError = ErrorType<unknown>;

export const useSmsGet = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smsGet>>,
    TError,
    { data: SmsGetBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof smsGet>>, { data: SmsGetBody }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return smsGet(data);
  };

  return useMutation<Awaited<ReturnType<typeof smsGet>>, TError, { data: SmsGetBody }, TContext>(
    mutationFn,
    mutationOptions,
  );
};

/**
 * 获取转账记录
 */
export const accountQueryTransferList = (
  accountQueryTransferListBody: AccountQueryTransferListBody,
) => {
  return customInstance<QueryTransferListResponse>({
    url: `/account/queryTransferList.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: accountQueryTransferListBody,
  });
};

export const getAccountQueryTransferListQueryKey = (
  accountQueryTransferListBody: AccountQueryTransferListBody,
) => [`/account/queryTransferList.do`, accountQueryTransferListBody];

export type AccountQueryTransferListQueryResult = NonNullable<
  Awaited<ReturnType<typeof accountQueryTransferList>>
>;
export type AccountQueryTransferListQueryError = ErrorType<unknown>;

export const useAccountQueryTransferList = <
  TData = Awaited<ReturnType<typeof accountQueryTransferList>>,
  TError = ErrorType<unknown>,
>(
  accountQueryTransferListBody: AccountQueryTransferListBody,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof accountQueryTransferList>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAccountQueryTransferListQueryKey(accountQueryTransferListBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof accountQueryTransferList>>> = () =>
    accountQueryTransferList(accountQueryTransferListBody);

  const query = useQuery<Awaited<ReturnType<typeof accountQueryTransferList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 划转，从一个账户转到另外一个账户
 */
export const accountTransfer = (accountTransferBody: AccountTransferBody) => {
  return customInstance<OutHoldAmountResponse>({
    url: `/account/transfer.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: accountTransferBody,
  });
};

export type AccountTransferMutationResult = NonNullable<
  Awaited<ReturnType<typeof accountTransfer>>
>;
export type AccountTransferMutationBody = AccountTransferBody;
export type AccountTransferMutationError = ErrorType<unknown>;

export const useAccountTransfer = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountTransfer>>,
    TError,
    { data: AccountTransferBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof accountTransfer>>,
    { data: AccountTransferBody }
  > = (props) => {
    const { data } = props ?? {};

    return accountTransfer(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof accountTransfer>>,
    TError,
    { data: AccountTransferBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 获取我的账户可用数量
 */
export const accountOutHoldAmount = (accountOutHoldAmountBody: AccountOutHoldAmountBody) => {
  return customInstance<OutHoldAmountResponse>({
    url: `/account/outHoldAmount.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: accountOutHoldAmountBody,
  });
};

export const getAccountOutHoldAmountQueryKey = (
  accountOutHoldAmountBody: AccountOutHoldAmountBody,
) => [`/account/outHoldAmount.do`, accountOutHoldAmountBody];

export type AccountOutHoldAmountQueryResult = NonNullable<
  Awaited<ReturnType<typeof accountOutHoldAmount>>
>;
export type AccountOutHoldAmountQueryError = ErrorType<unknown>;

export const useAccountOutHoldAmount = <
  TData = Awaited<ReturnType<typeof accountOutHoldAmount>>,
  TError = ErrorType<unknown>,
>(
  accountOutHoldAmountBody: AccountOutHoldAmountBody,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof accountOutHoldAmount>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAccountOutHoldAmountQueryKey(accountOutHoldAmountBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof accountOutHoldAmount>>> = () =>
    accountOutHoldAmount(accountOutHoldAmountBody);

  const query = useQuery<Awaited<ReturnType<typeof accountOutHoldAmount>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 获取所有账户类型
 */
export const accountListAccountType = () => {
  return customInstance<ListAccountTypeResponse>({
    url: `/account/listAccountType.do`,
    method: 'post',
  });
};

export const getAccountListAccountTypeQueryKey = () => [`/account/listAccountType.do`];

export type AccountListAccountTypeQueryResult = NonNullable<
  Awaited<ReturnType<typeof accountListAccountType>>
>;
export type AccountListAccountTypeQueryError = ErrorType<unknown>;

export const useAccountListAccountType = <
  TData = Awaited<ReturnType<typeof accountListAccountType>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof accountListAccountType>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAccountListAccountTypeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof accountListAccountType>>> = () =>
    accountListAccountType();

  const query = useQuery<Awaited<ReturnType<typeof accountListAccountType>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 修改手机
 */
export const userSecurityUpdatePhone = (
  userSecurityUpdatePhoneBody: UserSecurityUpdatePhoneBody,
) => {
  return customInstance<CommonResponse>({
    url: `/user/security/updatePhone.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: userSecurityUpdatePhoneBody,
  });
};

export type UserSecurityUpdatePhoneMutationResult = NonNullable<
  Awaited<ReturnType<typeof userSecurityUpdatePhone>>
>;
export type UserSecurityUpdatePhoneMutationBody = UserSecurityUpdatePhoneBody;
export type UserSecurityUpdatePhoneMutationError = ErrorType<unknown>;

export const useUserSecurityUpdatePhone = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userSecurityUpdatePhone>>,
    TError,
    { data: UserSecurityUpdatePhoneBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userSecurityUpdatePhone>>,
    { data: UserSecurityUpdatePhoneBody }
  > = (props) => {
    const { data } = props ?? {};

    return userSecurityUpdatePhone(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof userSecurityUpdatePhone>>,
    TError,
    { data: UserSecurityUpdatePhoneBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 提交提币申请
 */
export const withdrawSubmit = (withdrawSubmitBody: WithdrawSubmitBody) => {
  return customInstance<CommonResponse>({
    url: `/depositeWithdraw/withdrawSubmit.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: withdrawSubmitBody,
  });
};

export type WithdrawSubmitMutationResult = NonNullable<Awaited<ReturnType<typeof withdrawSubmit>>>;
export type WithdrawSubmitMutationBody = WithdrawSubmitBody;
export type WithdrawSubmitMutationError = ErrorType<unknown>;

export const useWithdrawSubmit = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof withdrawSubmit>>,
    TError,
    { data: WithdrawSubmitBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof withdrawSubmit>>,
    { data: WithdrawSubmitBody }
  > = (props) => {
    const { data } = props ?? {};

    return withdrawSubmit(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof withdrawSubmit>>,
    TError,
    { data: WithdrawSubmitBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 充提币申请提交
 */
export const chargeSubmit = (chargeSubmitBody: ChargeSubmitBody) => {
  return customInstance<CommonResponse>({
    url: `/depositeWithdraw/chargeSubmit.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: chargeSubmitBody,
  });
};

export type ChargeSubmitMutationResult = NonNullable<Awaited<ReturnType<typeof chargeSubmit>>>;
export type ChargeSubmitMutationBody = ChargeSubmitBody;
export type ChargeSubmitMutationError = ErrorType<unknown>;

export const useChargeSubmit = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chargeSubmit>>,
    TError,
    { data: ChargeSubmitBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof chargeSubmit>>,
    { data: ChargeSubmitBody }
  > = (props) => {
    const { data } = props ?? {};

    return chargeSubmit(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof chargeSubmit>>,
    TError,
    { data: ChargeSubmitBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 購買邀請碼
 */
export const inviteBuy = (inviteBuyBody: InviteBuyBody) => {
  return customInstance<CommonResponse>({
    url: `/invite/buy.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: inviteBuyBody,
  });
};

export type InviteBuyMutationResult = NonNullable<Awaited<ReturnType<typeof inviteBuy>>>;
export type InviteBuyMutationBody = InviteBuyBody;
export type InviteBuyMutationError = ErrorType<unknown>;

export const useInviteBuy = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof inviteBuy>>,
    TError,
    { data: InviteBuyBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof inviteBuy>>,
    { data: InviteBuyBody }
  > = (props) => {
    const { data } = props ?? {};

    return inviteBuy(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof inviteBuy>>,
    TError,
    { data: InviteBuyBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * 獲取邀請碼頁面
 */
export const inviteHome = (inviteHomeBody: InviteHomeBody) => {
  return customInstance<InviteHomeResponse>({
    url: `/invite/home.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: inviteHomeBody,
  });
};

export const getInviteHomeQueryKey = (inviteHomeBody: InviteHomeBody) => [
  `/invite/home.do`,
  inviteHomeBody,
];

export type InviteHomeQueryResult = NonNullable<Awaited<ReturnType<typeof inviteHome>>>;
export type InviteHomeQueryError = ErrorType<unknown>;

export const useInviteHome = <
  TData = Awaited<ReturnType<typeof inviteHome>>,
  TError = ErrorType<unknown>,
>(
  inviteHomeBody: InviteHomeBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof inviteHome>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getInviteHomeQueryKey(inviteHomeBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof inviteHome>>> = () =>
    inviteHome(inviteHomeBody);

  const query = useQuery<Awaited<ReturnType<typeof inviteHome>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 获取提币充币/申购相关记录
 */
export const depositList = (depositListBody: DepositListBody) => {
  return customInstance<DepositListResponse>({
    url: `/depositeWithdraw/list.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: depositListBody,
  });
};

export const getDepositListQueryKey = (depositListBody: DepositListBody) => [
  `/depositeWithdraw/list.do`,
  depositListBody,
];

export type DepositListQueryResult = NonNullable<Awaited<ReturnType<typeof depositList>>>;
export type DepositListQueryError = ErrorType<unknown>;

export const useDepositList = <
  TData = Awaited<ReturnType<typeof depositList>>,
  TError = ErrorType<unknown>,
>(
  depositListBody: DepositListBody,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof depositList>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDepositListQueryKey(depositListBody);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof depositList>>> = () =>
    depositList(depositListBody);

  const query = useQuery<Awaited<ReturnType<typeof depositList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * 我的頁面信息
 */
export const homeMy = (homeMyBody: HomeMyBody) => {
  return customInstance<HomeMyResponse>({
    url: `/home/my.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: homeMyBody,
  });
};

export type HomeMyMutationResult = NonNullable<Awaited<ReturnType<typeof homeMy>>>;
export type HomeMyMutationBody = HomeMyBody;
export type HomeMyMutationError = ErrorType<unknown>;

export const useHomeMy = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof homeMy>>,
    TError,
    { data: HomeMyBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof homeMy>>, { data: HomeMyBody }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return homeMy(data);
  };

  return useMutation<Awaited<ReturnType<typeof homeMy>>, TError, { data: HomeMyBody }, TContext>(
    mutationFn,
    mutationOptions,
  );
};

/**
 * 獲取我的頁面信息
 */
export const userInfo = (userInfoBody: UserInfoBody) => {
  return customInstance<UserInfoResponse>({
    url: `/user/info.do`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: userInfoBody,
  });
};

export type UserInfoMutationResult = NonNullable<Awaited<ReturnType<typeof userInfo>>>;
export type UserInfoMutationBody = UserInfoBody;
export type UserInfoMutationError = ErrorType<unknown>;

export const useUserInfo = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userInfo>>,
    TError,
    { data: UserInfoBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userInfo>>,
    { data: UserInfoBody }
  > = (props) => {
    const { data } = props ?? {};

    return userInfo(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof userInfo>>,
    TError,
    { data: UserInfoBody },
    TContext
  >(mutationFn, mutationOptions);
};
